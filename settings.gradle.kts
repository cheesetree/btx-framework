/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */
pluginManagement {
    repositories {
        gradlePluginPortal()
        maven { url = uri("https://maven.aliyun.com/repository/gradle-plugin") }
        maven { url = uri("https://repo.spring.io/plugins-release") }
    }
}

rootProject.name = "btx-framework"
rootProject.buildFileName = "build.gradle.kts"

/**
 * 查找buil文件
 */
val buildFiles: FileTree = fileTree(rootDir) {
    val excludes = gradle.startParameter.projectProperties["excludeProjects"]?.split(",")
//    include("**/*.gradle", "**/*.gradle.kts")
    include("**/*.gradle.kts")
    exclude("build", "**/gradle", "settings.gradle.kts", "buildSrc", "/build.gradle.kts", ".*", "out")
    exclude("**/grails3")
    if (excludes != null && excludes.isNotEmpty()) {
        exclude(excludes)
    }
}

val rootDirPath: String = rootDir.absolutePath + File.separator
buildFiles.forEach { buildFile ->
    val isDefaultName: Boolean = "build.gradle" == buildFile.name
    val isKotlin: Boolean = buildFile.name.endsWith(".kts")
    if (isDefaultName) {
        val buildFilePath: String = buildFile.parentFile.absolutePath
        val projectPath: String = buildFilePath.replace(rootDirPath, "").replace(File.separator, ":")
        include(projectPath)
    } else {
        val projectName: String =
            if (isKotlin) {
                buildFile.name.replace(".gradle.kts", "")
            } else {
                buildFile.name.replace(".gradle", "")
            }
        val projectPath = ":$projectName"
        include(projectPath)
        val project: ProjectDescriptor? = findProject(projectPath)
        if (project != null) {
            project.name = projectName
            project.projectDir = buildFile.parentFile
            project.buildFileName = buildFile.name
        }
    }
}
